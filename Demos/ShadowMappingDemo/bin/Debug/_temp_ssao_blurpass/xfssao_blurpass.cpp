//Autogenerated by XFDraw shader parser
#include "xfcore.h"

#include <stdio.h>

#include "xfconfig.cpp"




inline void shaderMethod(float* ssao_out, sampler2D ssaoInput, int pass_dir, vec3 gl_FragCoord){
	float result = 0.0;
	vec2 coord = vec2(gl_FragCoord);
	if (pass_dir == 0){
	for (int x = -2;
	 x < 2;
	 ++x){
	result += texture<float>(ssaoInput, coord + vec2(x, 0));
	}
	}
	else{
	for (int y = -2;
	 y < 2;
	 ++y){
	result += texture<float>(ssaoInput, coord + vec2(0, y));
	}
	}
	(*ssao_out) = result * 0.25f;
	
}
extern "C" __declspec(dllexport) void ShaderCallFunction(long Width, long Height, unsigned char** ptrPtrs, void* UniformPointer){
	sampler2D uniform_0;
	fcpy((char*)(&uniform_0), (char*)UniformPointer + 0, 28);
	int uniform_1;
	fcpy((char*)(&uniform_1), (char*)UniformPointer + 28, 4);

#pragma omp parallel for
	for (int h = 0; h < Height; ++h){
		int wPos = Width * h;
		float* ptr_0 = (float*)(ptrPtrs[0] + wPos * 4);

		vec3 gl_FragCoord = vec3(0, h, 0);
		for (int w = 0; w < Width; ++w, ++ptr_0, ++gl_FragCoord.x){
			shaderMethod(ptr_0, uniform_0, uniform_1, gl_FragCoord);
		}
	}
}
