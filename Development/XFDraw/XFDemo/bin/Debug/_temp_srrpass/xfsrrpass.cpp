//Autogenerated by XFDraw shader parser
#include "xfcore.h"

#include "xfconfig.cpp"




inline void shaderMethod(vec3* norm_data, vec3* frag_pos, byte4* FragColor, sampler2D colorBuffer, sampler2D depthBuffer, samplerCube skybox, float ray_max_length, int ray_count, float ray_count_inverse, float ray_min_distance, GLMatrix projection, float bias){
	(*FragColor) = byte4((*frag_pos).x, (*frag_pos).y, (*frag_pos).z);
	return;
	if ((*norm_data).x == 0 && (*norm_data).y == 0 && (*norm_data).z == 0)return;
	vec3 I = normalize((*frag_pos));
	vec3 R = reflect(I, (*norm_data));
	if (R.z <= 0){
	(*FragColor) = byte4(255, 255, 255);
	return;
	}
	vec3 pos = (*frag_pos);
	vec3 screen_coord;
	pos = pos + R * ray_min_distance;
	for (int i = 0;
	 i < ray_count;
	 i++){
	pos = pos + R * ray_count_inverse;
	screen_coord = projection * pos;
	if (screen_coord.x >= 1600 || screen_coord.y >= 900 || screen_coord.x < 0 || screen_coord.y < 0){
	(*FragColor) = textureNEAREST(skybox, R);
	return;
	}
	byte4 depth4 = textureNEAREST(depthBuffer, int2(screen_coord.x, screen_coord.y));
	float depth = projection.farZ - *(float*)&depth4;
	if (fabsf(depth - pos.z) <= bias){
	(*FragColor) = textureNEAREST(colorBuffer, int2(screen_coord.x, screen_coord.y));
	return;
	}
	}
	(*FragColor) = textureNEAREST(skybox, R);
	
}
extern "C" __declspec(dllexport) void ShaderCallFunction(long Width, long Height, unsigned char** ptrPtrs, void* UniformPointer){
	sampler2D uniform_0;
	fcpy((char*)(&uniform_0), (char*)UniformPointer + 0, 24);
	sampler2D uniform_1;
	fcpy((char*)(&uniform_1), (char*)UniformPointer + 24, 24);
	samplerCube uniform_2;
	fcpy((char*)(&uniform_2), (char*)UniformPointer + 48, 44);
	float uniform_3;
	fcpy((char*)(&uniform_3), (char*)UniformPointer + 92, 4);
	int uniform_4;
	fcpy((char*)(&uniform_4), (char*)UniformPointer + 96, 4);
	float uniform_5;
	fcpy((char*)(&uniform_5), (char*)UniformPointer + 100, 4);
	float uniform_6;
	fcpy((char*)(&uniform_6), (char*)UniformPointer + 104, 4);
	GLMatrix uniform_7;
	fcpy((char*)(&uniform_7), (char*)UniformPointer + 108, 56);
	float uniform_8;
	fcpy((char*)(&uniform_8), (char*)UniformPointer + 164, 4);

#pragma omp parallel for
	for (int h = 0; h < Height; ++h){
		int wPos = Width * h;
		vec3* ptr_0 = (vec3*)(ptrPtrs[0] + wPos * 12);

		vec3* ptr_1 = (vec3*)(ptrPtrs[1] + wPos * 12);

		byte4* ptr_2 = (byte4*)(ptrPtrs[2] + wPos * 4);

		for (int w = 0; w < Width; ++w, ++ptr_0, ++ptr_1, ++ptr_2){
			shaderMethod(ptr_0, ptr_1, ptr_2, uniform_0, uniform_1, uniform_2, uniform_3, uniform_4, uniform_5, uniform_6, uniform_7, uniform_8);
		}
	}
}
